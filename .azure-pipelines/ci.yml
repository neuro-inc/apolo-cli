# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
  batch: true
  branches:
    include:
    - master
    - ?.?
    - refs/tags/*
pr:
  branches:
    include:
    - master
    - ?.?


stages:
- stage: linters
  displayName: "Linters"
  jobs:
  - job: lint
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true

    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.7'
      displayName: "User Python 3.7"

    - script: |
        pip install -U pip wheel
        pip install -r requirements/ci.txt
      displayName: 'Install dependencies'

    - script: |
        make lint
      displayName: 'Run linters'
      
- stage: test
  displayName: "Run tests"
  jobs:
  - job: test
    strategy:
      matrix:
        Py36-Linux:
          python.version: '3.6'
          image: 'ubuntu-latest'
        Py37-Linux:
          python.version: '3.7'
          image: 'ubuntu-latest'
        Py36-Win64:
          python.version: '3.6'
          image: 'vs2017-win2016'
        Py37-Win64:
          python.version: '3.7'
          image: 'vs2017-win2016'

    pool:
      vmImage: $[ variables['image'] ]

    timeoutInMinutes: 15

    steps:
    - checkout: self
      clean: true

    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(python.version)'
      displayName: "Use Python $(python.version)"

    - script: |
        python -m pip install -U pip wheel
      displayName: 'Install prerequirements'

    - script: |
        pip install -r requirements/ci.txt pytest-azurepipelines
        pip install .
      displayName: 'Install dependencies'

    - script: |
        make test
      displayName: 'Run unittests'

    - script: |
        pip install codecov
        python -m codecov -f coverage.xml -X gcov
      displayName: 'Upload coverage reports'
      env:
        CODECOV_TOKEN: '$(codecov.token)'
