name: Test Release Process

# This workflow can be manually triggered to test the GitHub release process
on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: "Run in dry-run mode (no actual release)"
        type: boolean
        default: true
        required: false

jobs:
  test-release:
    name: Test Release Process
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install build twine

      - name: Build SDK
        run: |
          cd apolo-sdk
          python -m build

      - name: Build CLI
        run: |
          cd apolo-cli
          python -m build

      - name: Prepare version info for GitHub Release
        run: |
          # Create dist directory with all packages for the release assets
          mkdir dist
          cp apolo-sdk/dist/* dist/
          cp apolo-cli/dist/* dist/

          # Create a temporary directory with just SDK files for analyzing the package
          mkdir dist-analysis
          cp apolo-sdk/dist/* dist-analysis/

          # For debugging
          echo "Contents of dist directory:"
          ls -la dist/
          echo "Contents of dist-analysis directory:"
          ls -la dist-analysis/

      - name: Test GitHub Release
        id: create_release
        uses: aio-libs/create-release@v1.6.6
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          changes_file: CHANGELOG.md
          name: Apolo SDK/CLI
          pypi_token: "" # Empty to skip PyPI upload
          dist_dir: dist-analysis # Use only SDK packages for analysis
          version_file: apolo-sdk/src/apolo_sdk/__init__.py # CLI has the same version
          start_line: "[comment]: # (towncrier release notes start)"
          head_line: "Apolo SDK/CLI {version}\\s+\\({date}\\)\n====+\n?"
          fix_issue_regex: "\\(\\[#(\\d+)\\]\\(https://github.com/neuro-inc/platform-client-python/issues/\\1\\)\\)"
          fix_issue_repl: "(#\\1)"
          draft: true # Create as draft release
          dry_run: ${{ inputs.dry_run }}

      - name: Report Results
        run: |
          echo "Test completed successfully!"
          echo "Release URL: ${{ steps.create_release.outputs.release_url || 'No URL (dry run)' }}"
