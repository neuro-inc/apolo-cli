name: CI

on:
  push:
    branches: [master]
    tags: [v*]
  pull_request:
    branches: [master]
  schedule:
    - cron: 0 4 * * *
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Linter
    runs-on: ubuntu-latest
    # 5 mins for the linter run, possibly 10 min for pre-commit env reinitialization
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Setup Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
      - name: Cache pre-commit hooks
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit|py3.12|${{ hashFiles('.pre-commit-config.yaml') }}
      - name: Cache poetry dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: poetry-cache-${{ runner.os }}-${{ hashFiles('**/poetry.lock', '**/pyproject.toml') }}
          restore-keys: |
            poetry-cache-${{ runner.os }}-
      - name: Install poetry
        uses: abatilo/actions-poetry@v2
      - name: Install dependencies
        run: |
          poetry install --with dev --no-interaction
      - name: Run linters
        run: |
          make lint
        env:
          CI_LINT_RUN: 1
    # https://github.com/neuro-inc/neuro-cli/issues/2904
    #- name: Install spell checker
    #  run: |
    #    # sudo apt install libenchant-dev
    #    pip install -r requirements/doc.txt
    #- name: Run docs spelling
    #  run: |
    #    make api-doc-spelling

  unit:
    name: Unit
    needs: lint
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
        continue-on-error: [false]
        cmd: [sdk, cli]
        # temporarily disable windows tests
        os: [ubuntu, macos] # windows
        exclude:
          - python-version: "3.10"
            os: macos
            continue-on-error: false
          - python-version: "3.11"
            os: macos
            continue-on-error: false
          - python-version: "3.12"
            os: macos
            continue-on-error: false
        # os: [ubuntu, macos, windows]
        # exclude:
        # - python-version: '3.10'
        #   os: macos
        # - python-version: '3.10'
        #   os: windows
        # - python-version: '3.11'
        #   os: macos
        # - python-version: '3.11'
        #   os: windows
        # include:
        # - python-version: '3.14'
        #   os: ubuntu
        #   cmd: sdk
        #   continue-on-error: true
        # - python-version: '3.14'
        #   os: ubuntu
        #   cmd: cli
        #   continue-on-error: true
      fail-fast: false
    runs-on: ${{ matrix.os }}-latest
    timeout-minutes: 15
    continue-on-error: ${{ matrix.continue-on-error }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache poetry dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key:
            poetry-cache-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock', '**/pyproject.toml')
            }}
          restore-keys: |
            poetry-cache-${{ runner.os }}-${{ matrix.python-version }}-
      - name: Install poetry
        uses: abatilo/actions-poetry@v2
      - name: Install dependencies
        run: |
          poetry install --with dev,ci --no-interaction
      - name: Run unittests
        env:
          COLOR: yes
        run: |
          make .test-${{ matrix.cmd }} PYTEST_ARGS=-vvv
      - name: Upload coverage artifact
        uses: aio-libs/prepare-coverage@v24.9.2
        if: matrix.os == 'ubuntu'

  e2e:
    name: E2E
    needs: unit
    strategy:
      matrix:
        python-version: ["3.9"]
        os: [ubuntu]
      fail-fast: false
      max-parallel: 1
    runs-on: ${{ matrix.os }}-latest
    timeout-minutes: 90
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache poetry dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key:
            poetry-cache-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock', '**/pyproject.toml')
            }}
          restore-keys: |
            poetry-cache-${{ runner.os }}-${{ matrix.python-version }}-
      - name: Install poetry
        uses: abatilo/actions-poetry@v2
      - name: Install dependencies
        run: |
          poetry install --with dev,ci --no-interaction
      - name: Run E2E tests
        timeout-minutes: 75
        env:
          E2E_TOKEN: ${{ secrets.E2E_TOKEN }}
          E2E_USER_TOKEN: ${{ secrets.E2E_USER_TOKEN }}
          E2E_REFRESH_TOKEN: ${{ secrets.E2E_REFRESH_TOKEN }}
          E2E_USER_REFRESH_TOKEN: ${{ secrets.E2E_REFRESH_TOKEN }}
          E2E_PRESET: cpu-micro
          PYTEST_XDIST_NUM_THREADS: 16
          COLOR: yes
        run: |
          make .e2e
      - name: Upload coverage artifact
        uses: neuro-inc/prepare-coverage@v24.9.2
        if: matrix.os == 'ubuntu'

  upload-cov:
    name: Upload coverage
    needs: [unit, e2e]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
      #Temporarily disable, the fresh codecov requires TOKEN passed
      - name: Upload coverage
        uses: aio-libs/upload-coverage@v24.10.1

  deploy:
    name: Deploy
    # TODO y.s. 23.02.20: change back to e2e after tests fix
    needs: unit
    runs-on: ubuntu-latest
    # Run only on pushing a tag
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
      - name: Install poetry
        uses: abatilo/actions-poetry@v2
      - name: Check version
        run: |
          # Extract version from tag
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "Version from tag: $VERSION"
          # Update versions in pyproject.toml files
          poetry version -C apolo-sdk $VERSION
          poetry version -C apolo-cli $VERSION
          # Verify versions match
          SDK_VERSION=$(poetry version -C apolo-sdk -s)
          CLI_VERSION=$(poetry version -C apolo-cli -s)
          echo "SDK version: $SDK_VERSION"
          echo "CLI version: $CLI_VERSION"
          if [ "$SDK_VERSION" != "$VERSION" ] || [ "$CLI_VERSION" != "$VERSION" ]; then
            echo "Version mismatch!"
            exit 1
          fi
      - name: Build packages
        run: |
          poetry build -C apolo-sdk
          poetry build -C apolo-cli
      - name: Configure Poetry
        run: |
          poetry config pypi-token.pypi ${{ secrets.PYPI_TOKEN_SDK }}
      - name: Publish SDK
        run: |
          poetry publish -C apolo-sdk --no-interaction
      - name: Configure Poetry for CLI
        run: |
          poetry config pypi-token.pypi ${{ secrets.PYPI_TOKEN_CLI }}
      - name: Publish CLI
        run: |
          poetry publish -C apolo-cli --no-interaction
      - name: Merge dists for GitHub Release
        run: |
          mkdir dist
          cp apolo-cli/dist/* dist/
      - name: GitHub Release
        uses: aio-libs/create-release@v1.6.6
        with:
          changes_file: CHANGELOG.md
          name: Apolo SDK/CLI
          github_token: ${{ secrets.GITHUB_TOKEN }}
          pypi_token: ""
          version_file: apolo-cli/src/apolo_cli/__init__.py # CLI has the same version
          start_line: "[comment]: # (towncrier release notes start)"
          head_line: "# Apolo SDK/CLI {version} \\(\\d+-\\d+-\\d+\\)"
          fix_issue_regex:
            "\\(\\[#(\\d+)\\]\\(https://github.com/neuro-inc/platform-client-python/issues/\\\
            1\\)\\)"
          fix_issue_repl: "(#\\1)"
